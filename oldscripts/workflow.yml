name: Build and Release Tauri App

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags, e.g., v1.0.0

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: x86_64-pc-windows-gnu  # Cross-compile for Windows

      - name: Install Tauri CLI
        run: cargo install tauri-cli

      - name: Install GitHub CLI
        run: sudo apt-get install -y gh

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install Wine and mingw-w64
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y wine64 wine32 mingw-w64

      - name: Configure Wine Environment
        run: |
          export WINEPREFIX=$HOME/.wine
          wineboot --init

      - name: Change directory to cutwise
        working-directory: ./cutwise
        run: pnpm install

      - name: Make build.sh executable
        run: chmod +x ./src-tauri/build.sh
        working-directory: ./cutwise

      - name: Cross-compile Rust code for Windows
        working-directory: ./cutwise/src-tauri
        run: cargo build --release --target x86_64-pc-windows-gnu

      - name: Verify executable exists
        working-directory: ./cutwise/src-tauri/target/release
        run: |
          echo "Checking for MaterialWise.exe..."
          ls -la

      - name: Build MSI using Wine
        working-directory: ./cutwise
        run: |
          export WINEPREFIX=$HOME/.wine
          if [ -f ./src-tauri/target/release/MaterialWise.exe ]; then
            wine ./src-tauri/target/release/MaterialWise.exe tauri build
          else
            echo "Error: MaterialWise.exe not found"
            exit 1
          fi

      - name: List all directories
        run: find ./cutwise -type d

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload MSI Files
        run: |
          for file in ./cutwise/src-tauri/target/release/bundle/msi/*; do
            if [ -f "$file" ]; then
              echo "Uploading $file..."
              gh release upload ${{ github.event.release.tag_name }} "$file" --clobber
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./cutwise/src-tauri/target/release/bundle/msi/MaterialWise_0.0.34_x64_en-US.msi
          asset_name: MaterialWise_0.0.34_x64_en-US.msi
          asset_content_type: application/octet-stream

      - name: Upload main.exe
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./cutwise/src-tauri/resources/main/main.exe
          asset_name: main.exe
          asset_content_type: application/octet-stream

      - name: Upload settings.json
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./cutwise/src-tauri/resources/globals/settings.json
          asset_name: settings.json
          asset_content_type: application/json

      - name: Upload setup_db.sql
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./cutwise/src-tauri/resources/main/internal/db/setup_db.sql
          asset_name: setup_db.sql
          asset_content_type: application/sql
